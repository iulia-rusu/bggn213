---
title: "class_07 Machine Learning"
format: pdf
editor: visual
author: Iulia Rusu
---

Main function for kmeans clustering in base R is called 'kmeans()'

```{r}
hist(rnorm(5000, mean= 3))

```
```{r}
# Make a vector with 60 total points half centered at +3 and half centered at -3
tmp <- c(rnorm(30, mean =3), rnorm(30, mean= -3))
#reversed a vector to generate another vector with temp
tmp1 <- rev(tmp)
#cbind to bind to vectors as columns, generates matrix
temperature <- cbind(tmp, tmp1)
temperature
plot(temperature)
k <- kmeans(temperature, centers=2, nstart = 20)
k

```
```{r}
attributes(k)
```

```{r}
#What are the cluster centers
k$centers

```

```{r}
#Whats my clustering result

k$cluster
```

Plot data as 'x' showing your clustering result and the center point for each cluster?

```{r}

plot( temperature, col=k$cluster)
points(k$centers, pch=15, col="green")

#recycle property, allows you to make new data 

```
```{r}
#Run kmeans and cluster into 3 groups, plot

k3 <- kmeans(temperature, centers = 3, nstart = 20)
plot(temperature, col=k3$cluster)


```
```{r}
k$tot.withinss
k3$tot.withinss
```

Big limitation of kmeans is that it imposes structure on your data that you ask for in the first place.

#Heirarchical Clustering


The main function in "base" R for this is called 'hclust()' It wants a distance matrix as input not the data itself

We can calculate a distance matrix in lots of different ways bit here we will use the 'dist()' function.

```{r}
d <- dist(temperature)
hc <- hclust(d)
hc
plot(hc)
abline(h=9, col="red")
```
There is a special plot method for hclust obkects. Let's see it.

To get the cluster memership vector we need to "cut" the tree at a given height that we [ick]


```{r}
grps <- cutree(hc, k=2)
grps

```

```{r}
plot(temperature, col=grps)
```
Principle Component Analysis

```{r}
url <- "https://tinyurl.com/UK-foods"
x1 <- read.csv(url, row.names = 1)
```

```{r}
head(x1)

```
```{r}
#One useful plot in this case (beause we only have 4 countries to look accross) is a "pairs" plot
pairs(x1, col=rainbow(10), pch=16)
```

##Enter PCA

The main function to do a PCA in "base" R is called 'prcomp'
It wants our foods as the columns and the countries as the rows. It basically wants the transpose of the table.

```{r}
#transpose with t(x)

pca <- prcomp(t(x1))
summary(pca)
```
```{r}
attributes(pca)
```
```{r}
pca$x1
```
```{r}
pca$rotation
```
```{r}
plot(pca$x[, 1], pca$x[,2],  xlab = "PC1 (67%)", ylab="PC2 (29%)",
     col=c("orange", "red", "blue", "darkgreen"), pch=15)
abline(h=0, col="gray", lty=2)
abline(v=0, col="gray", lty=2)

```

